@page "/stringformatter"
@using Newtonsoft.Json
@using NSQLFormatter
@inject IJSRuntime JSRuntime

<div class="max-w-screen-xl mx-auto">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">String Formatters</h1>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
            <!-- Input Area -->
            <div class="flex flex-col">
                <label for="inputTxt" class="text-sm font-medium text-gray-700 mb-2">Input</label>
                <textarea @bind="Input" class="w-full h-64 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" id="inputTxt"></textarea>
            </div>

            <!-- Output Area -->
            <div class="flex flex-col relative">
                <label for="outputTxt" class="text-sm font-medium text-gray-700 mb-2">Output</label>
                <textarea @bind="Output" class="w-full h-64 p-3 border border-gray-300 rounded-md bg-gray-50" id="outputTxt" readonly></textarea>
                <button @onclick="CopyOutputToClipboard" 
                        id="copy-format-output-btn" 
                        class="absolute right-2 top-10 text-gray-500 hover:text-gray-700 focus:outline-none"
                        title="Copy to clipboard">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                </button>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="p-6 pt-0 flex flex-wrap gap-2">
            <button @onclick="FormatJson" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                JSON
            </button>
            <button @onclick="FormatSQL" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                SQL
            </button>
            <button @onclick="Upper" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
                Upper
            </button>
            <button @onclick="Lower" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
                Lower
            </button>
            <button @onclick="Base64EncodeText" class="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors">
                Base64 Encode
            </button>
            <button @onclick="Base64DecodeText" class="px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 transition-colors">
                Base64 Decode
            </button>
            <button @onclick="URLEncodeText" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
                URL Encode
            </button>
            <button @onclick="URLDecodeText" class="px-4 py-2 bg-pink-600 text-white rounded-md hover:bg-pink-700 transition-colors">
                URL Decode
            </button>
        </div>
    </div>
</div>

@code {
    public string? Input { get; set; }
    public string? Output { get; set; }

    private void FormatJson()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        try
        {
            dynamic? parsedJson = JsonConvert.DeserializeObject(Input);
            Output = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
        }
        catch
        {
            Output = "Error";
        }
    }

    private void FormatSQL()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        try
        {
            Output = NSQLFormatter.Formatter.Format(Input);
        }
        catch
        {
            Output = "Error";
        }
    }

    private void Upper()
    {
        Output = Input?.ToUpper();
    }

    private void Lower()
    {
        Output = Input?.ToLower();
    }

    private void Base64EncodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }
        Output = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(Input));
    }

    private void Base64DecodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        try
        {
            Output = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(Input));
        }
        catch (Exception ex)
        {
            Output = ex.ToString();
        }
    }

    private void URLEncodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        Output = System.Net.WebUtility.UrlEncode(Input);
    }

    private void URLDecodeText()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        Output = System.Net.WebUtility.UrlDecode(Input);
    }
    
    private async Task CopyOutputToClipboard()
    {
        if (!string.IsNullOrEmpty(Output))
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", Output, "copy-format-output-btn");
        }
    }
}