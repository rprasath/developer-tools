@page "/replacelinebreaks"

<div class="max-w-screen-xl mx-auto">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">Replace Line Breaks</h1>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="p-6">
            <!-- Input Area -->
            <div class="mb-6">
                <label for="inputTxt" class="text-sm font-medium text-gray-700 mb-2 block">Input</label>
                <textarea @bind="Input" class="w-full h-48 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" id="inputTxt"></textarea>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-wrap gap-2 mb-6">
                <button @onclick="CreateSQLTemp" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                    SQL Query
                </button>
                <button @onclick="CreateMultiColumnSQLTemp" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                    Multi Column SQL Query
                </button>
                <button @onclick="CommaSeperation" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
                    Comma Separate
                </button>
                <button @onclick="CommaSeperationWithQuotes" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors">
                    Comma Separate (Distinct, Quote)
                </button>
                <button @onclick="DistinctSort" class="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors">
                    Sort (Distinct)
                </button>
            </div>

            <!-- Output Area -->
            <div>
                <label for="outputTxt" class="text-sm font-medium text-gray-700 mb-2 block">Output</label>
                <textarea @bind="Output" class="w-full h-48 p-3 border border-gray-300 rounded-md bg-gray-50" id="outputTxt" readonly></textarea>
                <p class="text-xs text-gray-500 mt-2">@(FooterString)</p>
            </div>
        </div>
    </div>
</div>

@code {
    public string? Input { get; set; }
    public string? Output { get; set; }
    public string? FooterString { get; set; }

    private void CreateSQLTemp()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        var input = Input.Replace(Environment.NewLine, ",");
        var rows = input.Split(',', StringSplitOptions.RemoveEmptyEntries);

        var chunkedRows = rows.Select((x, i) => new { Index = i, Value = x })
                             .GroupBy(x => x.Index / 950)
                             .Select(x => x.Select(v => v.Value).ToList())
                             .ToList();

        System.Text.StringBuilder builder = new System.Text.StringBuilder();
        builder.AppendLine("create table #tempdata (Id nvarchar(100) not null)");

        foreach (var item in chunkedRows)
        {
            builder.AppendLine();
            builder.AppendLine("insert into #tempdata values");
            builder.AppendLine("('" + string.Join("'),('", item) + "')");
        }

        Output = builder.Replace("'NULL'", "NULL").ToString();
        FooterString = $"Found {rows.Length} items";
    }

    private void CreateMultiColumnSQLTemp()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        try
        {
            var rows = Input.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);

            var columHeaders = rows[0].Split('\t', StringSplitOptions.RemoveEmptyEntries);

            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("create table #tempdata (");

            System.Text.StringBuilder colBuilder = new System.Text.StringBuilder();
            foreach (var item in columHeaders)
            {
                colBuilder.Append($"{item} nvarchar(100) null,");
            }

            builder.Append(colBuilder.ToString().Trim(','));
            builder.AppendLine(")");

            foreach (var item in rows.Skip(1))
            {
                builder.AppendLine();
                builder.Append("insert into #tempdata values (");

                var rowDatas = item.Split('\t', StringSplitOptions.RemoveEmptyEntries);
                System.Text.StringBuilder rowBuilder = new System.Text.StringBuilder();
                foreach (var col in rowDatas)
                {
                    rowBuilder.Append($"'{col}',");
                }
                builder.Append(rowBuilder.Replace("'NULL'", "NULL").ToString().Trim(','));
                builder.AppendLine(")");
            }
            builder.AppendLine();

            Output = builder.ToString();
            FooterString = $"Found {columHeaders.Length} colums and {rows.Length - 1} rows";
        }
        catch (Exception ex)
        {
            Output = ex.ToString();
        }
    }

    private void CommaSeperation()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        var commaSeperatedInput = Input.Replace(Environment.NewLine, ",");
        var rows = commaSeperatedInput.Split(',', StringSplitOptions.RemoveEmptyEntries);

        Output = string.Join(",", rows);
        FooterString = $"Found {rows.Length} items";
    }

    private void CommaSeperationWithQuotes()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        var commaSeperatedInput = Input.Replace(Environment.NewLine, ",");
        var rows = commaSeperatedInput.Split(',', StringSplitOptions.RemoveEmptyEntries).Distinct().OrderBy(e => e);

        Output = $"'{string.Join("','", rows)}'";
        FooterString = $"Found {rows.Count()} distinct items";
    }

    private void DistinctSort()
    {
        if (string.IsNullOrWhiteSpace(Input))
        {
            return;
        }

        var origRows = Input.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);
        var rows = origRows.Distinct().OrderBy(e => e);

        Output = string.Join(Environment.NewLine, rows);
        var removedCount = origRows.Length - rows.Count();
        if (removedCount > 0)
        {
            FooterString = $"Input has {origRows.Length} rows. Removed {removedCount} duplicates. Result has {rows.Count()} distinct rows";
        }
        else
        {
            FooterString = "No duplicates found";
        }
    }
}