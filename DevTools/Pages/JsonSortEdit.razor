@page "/jsoneditsort"
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Text;
@inject IJSRuntime JSRuntime

<div class="max-w-screen-xl mx-auto">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">JSON Edit/Sort</h1>

    <div class="bg-white rounded-lg shadow-md overflow-hidden">
        <div class="p-6">
            <!-- Input Area -->
            <div class="mb-6">
                <label for="inputTxt" class="text-sm font-medium text-gray-700 mb-2 block">Input JSON</label>
                <textarea @bind="Input1" class="w-full h-48 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500" id="inputTxt"></textarea>
            </div>

            <!-- Controls -->
            <div class="grid grid-cols-1 md:grid-cols-12 gap-4 mb-6">
                <div class="md:col-span-3">
                    <label for="SortProp" class="text-sm font-medium text-gray-700 mb-2 block">Sort By</label>
                    <input type="text" @bind="SortProp" class="w-full p-2 border border-gray-300 rounded-md" name="SortProp" id="SortProp" />
                </div>
                <div class="md:col-span-7">
                    <label for="ExcludeProps" class="text-sm font-medium text-gray-700 mb-2 block">Exclude Fields (Comma separated)</label>
                    <input type="text" @bind="ExcludeProps" class="w-full p-2 border border-gray-300 rounded-md" name="ExcludeProps" id="ExcludeProps" />
                </div>
                <div class="md:col-span-2 flex items-end">
                    <button @onclick="RemoveAndSort" class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        Run
                    </button>
                </div>
            </div>

            <!-- Output Area -->
            <div class="relative">
                <label for="outputTxt" class="text-sm font-medium text-gray-700 mb-2 block">Output JSON</label>
                <textarea @bind="Output" class="w-full h-48 p-3 border border-gray-300 rounded-md bg-gray-50" id="outputTxt" readonly></textarea>
                <button @onclick="CopyOutputToClipboard" 
                        id="copy-json-output-btn" 
                        class="absolute right-2 top-10 text-gray-500 hover:text-gray-700 focus:outline-none"
                        title="Copy to clipboard">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    public string? Input1 { get; set; }
    public string? SortProp { get; set; }
    public string? ExcludeProps { get; set; }
    public string? Output { get; set; }

    private void RemoveAndSort()
    {
        if (string.IsNullOrWhiteSpace(Input1))
        {
            return;
        }

        var parsedInput = JToken.Parse(Input1);

        Output = RemoveAndSortInternal(parsedInput)?.ToString(Formatting.Indented);
    }

    private JArray RemoveAndSortInternal(JToken parsedInput)
    {
        var sortedInput = Sort(parsedInput);

        var excludePropArray = ExcludeProps?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? new string[0];

        if (excludePropArray.Any())
        {
            JArray updated = new();
            foreach (var item in sortedInput)
            {
                updated.Add(RemoveFields(item, excludePropArray));
            }

            return updated;
        }
        else
        {
            return sortedInput;
        }
    }

    private JArray Sort(JToken token)
    {
        if (token is JArray && SortProp != null)
        {
            var array = (JArray)token;
            return new JArray(array.OrderBy(obj => obj[SortProp]?.ToString())); ;
        }
        else if (token is JArray)
        {
            return (JArray)token;
        }
        else
        {
            return new JArray() { token };
        }
    }

    private JToken RemoveFields(JToken token, string[] fields)
    {
        JContainer? container = token as JContainer;
        if (container == null) return token;

        List<JToken> removeList = new List<JToken>();
        foreach (JToken el in container.Children())
        {
            JProperty? p = el as JProperty;
            if (p != null && fields.Contains(p.Name))
            {
                removeList.Add(el);
            }
            RemoveFields(el, fields);
        }

        foreach (JToken el in removeList)
        {
            el.Remove();
        }

        return token;
    }
    
    private async Task CopyOutputToClipboard()
    {
        if (!string.IsNullOrEmpty(Output))
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", Output, "copy-json-output-btn");
        }
    }
}